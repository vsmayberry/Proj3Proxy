==12580== Memcheck, a memory error detector
==12580== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==12580== Using Valgrind-3.10.0.SVN and LibVEX; rerun with -h for copyright info
==12580== Command: ./sproxy
==12580== 
==12580== Invalid write of size 1
==12580==    at 0x4C313E0: memset (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==12580==    by 0x4015F3: main (sproxy.c:267)
==12580==  Address 0x51fc050 is 8 bytes after a block of size 8 alloc'd
==12580==    at 0x4C2AB80: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==12580==    by 0x4015C2: main (sproxy.c:265)
==12580== 
==12580== Invalid write of size 1
==12580==    at 0x4C313EA: memset (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==12580==    by 0x4015F3: main (sproxy.c:267)
==12580==  Address 0x51fc052 is 10 bytes after a block of size 8 alloc'd
==12580==    at 0x4C2AB80: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==12580==    by 0x4015C2: main (sproxy.c:265)
==12580== 
==12580== Syscall param read(buf) points to unaddressable byte(s)
==12580==    at 0x4F22810: __read_nocancel (syscall-template.S:81)
==12580==    by 0x401613: main (sproxy.c:268)
==12580==  Address 0x51fc050 is 8 bytes after a block of size 8 alloc'd
==12580==    at 0x4C2AB80: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==12580==    by 0x4015C2: main (sproxy.c:265)
==12580== 
==12580== Invalid write of size 8
==12580==    at 0x401694: main (sproxy.c:281)
==12580==  Address 0x51fc450 is not stack'd, malloc'd or (recently) free'd
==12580== 
==12580== Invalid read of size 8
==12580==    at 0x401720: main (sproxy.c:301)
==12580==  Address 0x51fc450 is not stack'd, malloc'd or (recently) free'd
==12580== 
==12580== Invalid write of size 1
==12580==    at 0x4C313E0: memset (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==12580==    by 0x4014B1: main (sproxy.c:234)
==12580==  Address 0x51fc0a0 is 8 bytes after a block of size 8 alloc'd
==12580==    at 0x4C2AB80: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==12580==    by 0x401480: main (sproxy.c:232)
==12580== 
==12580== Invalid write of size 1
==12580==    at 0x4C313EA: memset (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==12580==    by 0x4014B1: main (sproxy.c:234)
==12580==  Address 0x51fc0a2 is 10 bytes after a block of size 8 alloc'd
==12580==    at 0x4C2AB80: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==12580==    by 0x401480: main (sproxy.c:232)
==12580== 
==12580== Syscall param read(buf) points to unaddressable byte(s)
==12580==    at 0x4F22810: __read_nocancel (syscall-template.S:81)
==12580==    by 0x4014D1: main (sproxy.c:235)
==12580==  Address 0x51fc0a0 is 8 bytes after a block of size 8 alloc'd
==12580==    at 0x4C2AB80: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==12580==    by 0x401480: main (sproxy.c:232)
==12580== 
==12580== Invalid write of size 8
==12580==    at 0x401552: main (sproxy.c:248)
==12580==  Address 0x51fc4a0 is not stack'd, malloc'd or (recently) free'd
==12580== 
==12580== Invalid read of size 8
==12580==    at 0x401818: main (sproxy.c:319)
==12580==  Address 0x51fc4a0 is not stack'd, malloc'd or (recently) free'd
==12580== 
--12580-- VALGRIND INTERNAL ERROR: Valgrind received a signal 11 (SIGSEGV) - exiting
--12580-- si_code=1;  Faulting address: 0x610C0C6;  sp: 0x802b99dd0

valgrind: the 'impossible' happened:
   Killed by fatal signal
==12580==    at 0x3805CF06: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==12580==    by 0x380216D4: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==12580==    by 0x380218A2: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==12580==    by 0x3809DC03: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==12580==    by 0x380AC87C: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable
==12580==    at 0x4C2AB80: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==12580==    by 0x4015C2: main (sproxy.c:265)


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

